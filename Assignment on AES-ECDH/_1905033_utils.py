import os
from BitVector import *

W = [[0] * 16 for _ in range(11)]

def key_scheduling(key_matrix):
    W[0] = key_matrix
    rcidx = 0
    for i in range(1, 11):
        for j in range(0, 16, 4):
            if j == 0:
                if i == 1:
                    rcidx = 1
                elif i > 1 and rcidx < int('0x80', 16):
                    rcidx = 2 * rcidx
                elif i > 1 and rcidx >= int('0x80', 16):
                    rcidx = (2 * rcidx) ^ 0x11B
                rconi = [hex(rcidx), '0x00', '0x00', '0x00']
                W[i][0:4] = xor(xor(W[i - 1][0:4], sub_bytes(cyclic_shift_left(W[i - 1][-4:], 0, 3, 1), 4, encrypt=True)), rconi)
            else:
                W[i][j:j + 4] = xor(W[i - 1][j:j + 4], W[i][j - 4:j])


def padding(input_string, length):
    bits = len(input_string) * 8
    padding_bits = 0

    if length == '128':
        padding_bits = (128 - bits) % 128
    elif length == '192':
        padding_bits = (192 - bits) % 192
    elif length == '256':
        padding_bits = (256 - bits) % 256
    padded_string = input_string + ' ' * (padding_bits // 8)
    return padded_string


def string_to_array(input_string, length):
    padded_string = padding(input_string, length)
    hex_array = ['{:02x}'.format(ord(char)) for char in padded_string]
    return hex_array


def string_to_matrix(input_string, length):
    padded_string = padding(input_string, length)
    col = 0
    if length == '128':
        col = 16
    elif length == '192':
        col = 24
    elif length == '256':
        col = 32
    hex_matrix = [['{:02x}'.format(ord(char)) for char in padded_string[i:i+col:]] for i in range(0,len(padded_string)-1,col)]
    return hex_matrix


def xor(list1, list2):
    result_list = ['{:02x}'.format(int(a, 16) ^ int(b, 16)) for a, b in zip(list1, list2)]
    return result_list


def generate_iv(length):
    if length == '128':
        col = 16
    elif length == '192':
        col = 24
    elif length == '256':
        col = 32
    iv = os.urandom(col).hex()
    iv = [iv[i:i + 2] for i in range(0, len(iv), 2)]
    return iv

def array_to_matrix_column_major(arr, rows, cols):
    if rows * cols != len(arr):
        raise ValueError("Number of elements in the array should match the size of the matrix.")

    matrix = [[0] * cols for _ in range(rows)]

    index = 0
    for col in range(cols):
        for row in range(rows):
            matrix[row][col] = arr[index]
            index += 1

    return matrix
def matrix_to_array_column_major(matrix):
    rows = len(matrix)
    cols = len(matrix[0]) if rows > 0 else 0

    if any(len(row) != cols for row in matrix):
        raise ValueError("The matrix should have a consistent number of columns in each row.")

    result_array = []

    for col in range(cols):
        for row in range(rows):
            result_array.append(matrix[row][col])

    return result_array
def sub_bytes(temp_matrix, N, encrypt):
    if encrypt:
        box = s_box
    else:
        box = is_box
    for i in range(N):
            byte_to_find = temp_matrix[i]
            row_index = int(byte_to_find, 16) // 0x10
            column_index = int(byte_to_find, 16) % 0x10
            substitute_byte = box[row_index][column_index]
            temp_matrix[i] = substitute_byte
    temp_matrix = [hex(num) for num in temp_matrix]
    temp_matrix = [hex_str[2:] for hex_str in temp_matrix]
    return temp_matrix

def cyclic_shift_left(array, start_index, end_index, shift_amount):
    selected_elements = array[start_index:end_index + 1]
    shifted_elements = selected_elements[shift_amount:] + selected_elements[:shift_amount]
    array[start_index:end_index + 1] = shifted_elements
    return array


def cyclic_shift_right(array, start_index, end_index, shift_amount):
    selected_elements = array[start_index:end_index + 1]
    shifted_elements = selected_elements[-shift_amount:] + selected_elements[:-shift_amount]
    array[start_index:end_index + 1] = shifted_elements
    return array


def shift_row(temp_matrix, encrypt):
    mat=array_to_matrix_column_major(temp_matrix,4,4)
    for i in range(4):
        if i == 1:
            if encrypt:
                cyclic_shift_left(mat[i], 0, 4, 1)
            else:
                cyclic_shift_right(mat[i], 0, 4, 1)
        elif i == 2:
            if encrypt:
                cyclic_shift_left(mat[i], 0, 4, 2)
            else:
                cyclic_shift_right(mat[i], 0, 4, 2)
        elif i == 3:
            if encrypt:
                cyclic_shift_left(mat[i], 0, 4, 3)
            else:
                cyclic_shift_right(mat[i], 0, 4, 3)
    temp_matrix=matrix_to_array_column_major(mat)
    return temp_matrix


def mix_columns(temp_matrix, encrypt):
    if encrypt:
        mixer = Mixer
    else:
        mixer = InvMixer
    AES_modulus = BitVector(bitstring='100011011')
    mat = []
    for _ in range(4):
        mat.append([BitVector(intVal=0, size=8)] * 4)
    for i in range(4):
        for j in range(4):
            mat[i][j] = BitVector(hexstring=temp_matrix[i + j * 4])
    temp = []
    for _ in range(4):
        temp.append([BitVector(intVal=0, size=8)] * 4)
    for i in range(4):
        for j in range(4):
            for k in range(4):
                temp[i][j] ^= mixer[i][k].gf_multiply_modular(mat[k][j], AES_modulus, 8)
    for i in range(4):
        for j in range(4):
            temp_matrix[i + j * 4] = temp[i][j]
    temp_matrix = [hex_str.get_bitvector_in_hex() for hex_str in temp_matrix]
    return temp_matrix


def add_round_key(temp_matrix, R, j, encrypt):
    if encrypt:
        return xor(temp_matrix, W[j])
    else:
        return xor(temp_matrix, W[R - 1 - j])


s_box = [
    [0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76],
    [0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0],
    [0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15],
    [0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75],
    [0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84],
    [0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF],
    [0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8],
    [0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2],
    [0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73],
    [0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB],
    [0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79],
    [0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08],
    [0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A],
    [0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E],
    [0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF],
    [0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16]
]
is_box = [
    [0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB],
    [0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB],
    [0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E],
    [0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25],
    [0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92],
    [0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84],
    [0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06],
    [0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B],
    [0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73],
    [0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E],
    [0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B],
    [0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4],
    [0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F],
    [0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF],
    [0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61],
    [0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D]
]
Mixer = [
    [BitVector(hexstring="02"), BitVector(hexstring="03"), BitVector(hexstring="01"), BitVector(hexstring="01")],
    [BitVector(hexstring="01"), BitVector(hexstring="02"), BitVector(hexstring="03"), BitVector(hexstring="01")],
    [BitVector(hexstring="01"), BitVector(hexstring="01"), BitVector(hexstring="02"), BitVector(hexstring="03")],
    [BitVector(hexstring="03"), BitVector(hexstring="01"), BitVector(hexstring="01"), BitVector(hexstring="02")]
]

InvMixer = [
    [BitVector(hexstring="0E"), BitVector(hexstring="0B"), BitVector(hexstring="0D"), BitVector(hexstring="09")],
    [BitVector(hexstring="09"), BitVector(hexstring="0E"), BitVector(hexstring="0B"), BitVector(hexstring="0D")],
    [BitVector(hexstring="0D"), BitVector(hexstring="09"), BitVector(hexstring="0E"), BitVector(hexstring="0B")],
    [BitVector(hexstring="0B"), BitVector(hexstring="0D"), BitVector(hexstring="09"), BitVector(hexstring="0E")]
]
rci = [ '0x00', '0x01', '0x02', '0x04', '0x08', '0x10', '0x20', '0x40', '0x80', '0x1B', '0x36']
